package com.ktor_sample.modules.store.service.model

import com.fasterxml.jackson.annotation.JsonSubTypes
import com.fasterxml.jackson.annotation.JsonTypeInfo
import java.time.Instant
import java.util.*

@JsonTypeInfo(
    use = JsonTypeInfo.Id.NAME,
    include = JsonTypeInfo.As.PROPERTY,
    property = "type"
)
@JsonSubTypes(
    JsonSubTypes.Type(value = CouponMetadata::class, name = "coupon"),
    JsonSubTypes.Type(value = GiveawayMetadata::class, name = "giveaway")
)
sealed class RewardMetadata {
    abstract val id: Long
    abstract val price: Int
    abstract val maxAmountPerUser: Int

    /** -1 means unlimited amount */
    abstract val totalAmount: Int

    // Ignore this property if totalAmount is -1
    abstract val availableAmount: Int
}

data class CouponMetadata(
    override val id: Long,
    override val price: Int,
    override val maxAmountPerUser: Int,
    override val totalAmount: Int,
    override val availableAmount: Int
) : RewardMetadata() {
    /**
     * In the future, we can add a type property to CouponMetadata, make it polymorphic, and have different types
     * of code generators here (like a static code, a dynamic code generated by us (like in this first example), or
     * a list of codes stored in some other db table)
     */
    fun generateCode(): String {
        val raw = Random().nextLong().toString(20).padStart(12, '0').reversed().uppercase()
        return raw.substring(0..3) + "-" + raw.substring(4..7) + "-" + raw.substring(8..11)
    }
}

data class GiveawayMetadata(
    override val id: Long,
    override val price: Int,
    override val maxAmountPerUser: Int,
    override val totalAmount: Int,
    override val availableAmount: Int,
    val startAt: Instant,
    val endAt: Instant
) : RewardMetadata()
